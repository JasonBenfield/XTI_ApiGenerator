import { UrlQueryBuilder } from "./UrlQueryBuilder";
import { Url } from "./Url";
import { UrlHashBuilder } from "./UrlHashBuilder";
export declare class UrlBuilder {
    static current(): UrlBuilder;
    constructor(baseUrl: string);
    private _url;
    private readonly _query;
    private readonly _hash;
    readonly url: Url;
    addPart(part: string): this;
    hasQuery(name: string): boolean;
    clearQuery(): this;
    removeQuery(name: string): this;
    replaceQuery(name: string, value: string[]): UrlBuilder;
    replaceQuery(name: string, value: string): UrlBuilder;
    replaceQuery(name: string, value: Date): UrlBuilder;
    replaceQuery(name: string, value: number): UrlBuilder;
    addQuery(name: string, value: string[]): UrlBuilder;
    addQuery(name: string, value: string): UrlBuilder;
    addQuery(name: string, value: Date): UrlBuilder;
    addQuery(name: string, value: number): UrlBuilder;
    addQueryString(query: string): this;
    addQueryFromObject(obj: any): this;
    getQuery(): UrlQueryBuilder;
    getQueryValue(name: string): string;
    hasHash(name: string): boolean;
    clearHash(): void;
    removeHash(name: string): this;
    replaceHash(name: string, value: string[]): UrlBuilder;
    replaceHash(name: string, value: string): UrlBuilder;
    replaceHash(name: string, value: Date): UrlBuilder;
    replaceHash(name: string, value: number): UrlBuilder;
    addHash(name: string, value: string[]): UrlBuilder;
    addHash(name: string, value: string): UrlBuilder;
    addHash(name: string, value: Date): UrlBuilder;
    addHash(name: string, value: number): UrlBuilder;
    addHashString(query: string): this;
    addHashFromObject(obj: any): this;
    readonly hash: UrlHashBuilder;
    getHashValue(name: string): string;
    value(): string;
    withoutQueryAndHash(): Url;
    toString(): string;
}
